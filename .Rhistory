acc1 <- acc
counties1 <- counties
glcs1$STATE <- glcs1$`State Code`
glcs1$COUNTY <- glcs1$`County Code`
geo1 <- acc1 %>% join(glcs1)
geo1 <- geo1 %>% distinct()
geo1$subregion <- geo1$`County Name`
geo1 <- geo1 %>% select(-c("STATE", "COUNTY", "State Name", "County Name"))
geo1$region <- tolower(geo1$region)
geo1$subregion <- tolower(geo1$subregion)
glcs_acc <- geo1 %>% group_by(region, subregion, MONTH, YEAR) %>% summarise(numAcc = n())
final <- counties1 %>% join(glcs_acc)
ggplot(final, aes(x=long, y=lat, fill=numAcc)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude") + labs(fill = "Number of Accidents")
View(geo1)
glcs1 <- glcs1 %>% select("STATE", "State Name", "COUNTY", "County Name")
View(glcs_acc)
acc1 <- acc1 %>% select("STATE", "COUNTY", "ST_CASE")
geo1 <- acc1 %>% join(glcs1)
View(geo1)
geo1 <- geo1 %>% distinct()
View(geo1)
geo1$region <- geo1$`State Name`
geo1$subregion <- geo1$`County Name`
geo1 <- geo1 %>% select(-c("STATE", "COUNTY", "State Name", "County Name"))
geo1$region <- tolower(geo1$region)
geo1$subregion <- tolower(geo1$subregion)
glcs_acc <- geo1 %>% group_by(region, subregion) %>% summarise(numAcc = n())
final <- counties1 %>% join(glcs_acc)
ggplot(final, aes(x=long, y=lat, fill=numAcc)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude") + labs(fill = "Number of Accidents")
final
knitr::opts_chunk$set(echo = TRUE)
acc <- acc %>% filter(WEATHER < 98)
Weather <- acc %>% group_by(STATE, WEATHER) %>% summarise(n=n())
ggplot(Weather, aes(x=STATE, y=n, fill=WEATHER))+geom_bar(stat = "identity")+xlim(c(0,60))+
ylim(c(0, 3500))+ylab('Number of Accidents')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("ggrepel")
library(ggrepel)
str(final)
bis <- read_excel("KIB - Best in Show (public).xlsx", sheet = "Best in show", skip = 6)
bis <- readxl::read_excel("KIB - Best in Show (public).xlsx", sheet = "Best in show", skip = 6)
bis[bis == "no data"] <- NA
bis$breed <- bis$...1
bis$type <- bis$`American Kennel Club group`
bis$size <- bis$...46
bis$popularity <- bis$`US. American Kennel Club registrations 2011, pure breeds only`
bis$intelligence <- bis$...10
library(dplyr)
dat <- bis %>% select("breed", "type", "size", "popularity", "intelligence")
dat <- dat[1:172, ]
head(dat)
bis_fs <- read_excel("KIB - Best in Show (public).xlsx", sheet = "Best in show full sheet", skip = 3)
bis_fs <- readxl::read_excel("KIB - Best in Show (public).xlsx", sheet = "Best in show full sheet", skip = 3)
bis_fs$breed <- bis_fs$`Dog breed`
bis_fs$score <- bis_fs$...5
dat1 <- bis_fs %>% select("breed", "score")
#Drop the columns that are not dogs
dat1 <- dat1[-c(134, 144), ]
final <- merge(dat, dat1)
final$size <- as.factor(final$size)
final$type <- as.factor(final$type)
final$intelligence <- as.factor(final$intelligence)
str(final)
ggplot(final, aes(x=score, y= popularity, color=intelligence, size=size, shape=type))
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence))
ggplot(final, aes(x=score, y= popularity, color=type, size=intelligence, shape=size))
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point()
ggplot(final, aes(x=score, y= popularity, color=intelligence, size=size, shape=type)) + geom_point()
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel()
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=breed)
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=final$breed)
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=final$breed, size = 2)
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=final$breed, size = 2)
?vline
??vline
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=final$breed, size = 2) + geom_vline(xintercept = 2.5) + geom_hline(yintercept = 75)
ggplot(final, aes(x=score, y= popularity, color=type, size=size, shape=intelligence)) + geom_point() + geom_text_repel(label=final$breed, size = 2) + geom_vline(xintercept = 2.5) + geom_hline(yintercept = 75)
p <- ggplot(merged, aes(x=long, y=lat, color=numGolds)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
library(ggplot2)
p <- ggplot(merged, aes(x=long, y=lat, color=numGolds)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
golds <- athlete_events %>% filter(Medal == "Gold")
g <- golds %>% group_by(Team) %>% summarise(numGolds = n())
library(dplyr)
golds <- athlete_events %>% filter(Medal == "Gold")
knitr::opts_chunk$set(echo = TRUE)
athlete_events <- read_csv("athlete_events.csv")
athlete_events <- readxl::read_csv("athlete_events.csv")
setwd("~/Schoolwork/ds202/ds202_project")
athlete_events <- read_csv("athlete_events.csv")
athlete_events <- read.csv("athlete_events.csv")
library(dplyr)
athlete_events$Medal <- as.factor(athlete_events$Medal)
football <- athlete_events %>% filter(Sport == "Football")
swimming <- athlete_events %>% filter(Sport == "Swimming")
athletics <- athlete_events %>% filter(Sport == "Athletics")
gymnastics <- athlete_events %>% filter(Sport == "Gymnastics")
volleyball <- athlete_events %>% filter(Sport == "Volleyball")
golds <- athlete_events %>% filter(Medal == "Gold")
g <- golds %>% group_by(Team) %>% summarise(numGolds = n())
test <- g
write.csv(test, "goldmedals.csv")
golds_final <- read_csv("goldmedals.csv", col_types = cols(X1 = col_skip()))
countries <- map_data('world')
golds_final <- read.csv("goldmedals.csv", col_types = cols(X1 = col_skip()))
golds_final <- read.csv("goldmedals.csv", col_types = cols(X1 = col_skip()))
write.csv(test, "goldmedals.csv")
library(readr)
goldmedals_final <- read_csv("goldmedals_final.csv",
col_types = cols(X1 = col_skip()))
View(goldmedals_final)
countries <- map_data('world')
merged <-  right_join(golds_final, countries, by= c("Team"="region"))
golds_final <- read_csv("goldmedals_final.csv", col_types = cols(X1 = col_skip()))
countries <- map_data('world')
merged <-  right_join(golds_final, countries, by= c("Team"="region"))
library(ggplot2)
p <- ggplot(merged, aes(x=long, y=lat, color=numGolds)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat, fill=numGolds)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat, fill=numGolds)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= factor(numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= factor(numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= factor(numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= factor(numGolds)) + xlab("Longitude") + ylab("Latitude")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill=numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- p + scale_color_gradient(numGolds, low='#000000', high='#FFCA33')
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(numGolds, low='#000000', high='#FFCA33')
p
##There are some issues with differently named countries
merged$numGolds
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat, fill= merged$numGolds)) + geom_polygon(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= merged$numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- p + scale_fill_identity()
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= merged$numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_gradient(low='#000000', high='#FFCA33')
p
p <- p + scale_color_continuous(low='#000000', high='#FFCA33')
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_color_continuous(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='#000000', high='#FFCA33')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='blue', high='gold')
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='blue', high='gold', names="Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='blue', high='gold') + labs("Number of Gold Medals")
p
p <- p + scale_fill_continuous(low='blue', high='gold') + labs(fill= "Number of Gold Medals")
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='blue', high='gold') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='grey', high='gold') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='grey', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='black', high='gold', na.value='black') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='black', high='white', na.value='black') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + geom_path() + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + coord_fixed() + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + geom_point() + geom_path() + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat)) + geom_polygon(aes(group=group, fill= numGolds)) + geom_path() + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path() + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='grey', high='black', na.value='white') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='black', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group, size=0.5)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group, size=5)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group, size = 0.13)) + xlab("Longitude") + ylab("Latitude")
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group, size = 13)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group, size = 0.13)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='gold', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- p + scale_fill_continuous(low='white', high='red', na.value='grey') + labs(fill= "Number of Gold Medals")
p
golds <- athlete_events %>% filter(Medal == "Gold")
g <- golds %>% group_by(Team) %>% summarise(numGolds = n())
test <- g
write.csv(test, "goldmedals.csv")
golds_final <- read_csv("goldmedals_final.csv", col_types = cols(X1 = col_skip()))
countries <- map_data('world')
merged <-  right_join(golds_final, countries, by= c("Team"="region"))
library(ggplot2)
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='red', na.value='grey') + labs(fill= "Number of Gold Medals")
p
library(ggplot2)
russia <- athlete_events %>% filter(Team == "Russia")
View(russia)
rus_sum <- russia %>% group_by(Year) %>% summarise(numMedals = sum(Medal))
rus_sum <- russia %>% group_by(Year) %>% summarise(numMedals = count(Medal))
rus_sum <- russia %>% group_by(Year) %>% summarise(numMedals = n(Medal))
rus_sum <- russia %>% group_by(Year) %>% tally()
View(rus_sum)
#number of medals
rus_medals <- russia %>% filter(!is.na(Medal)) %>% group_by(Year) %>% summarise(numMedals = n())
View(rus_medals)
df <- football %>% filter(Medal == "Gold") %>% group_by(Team) %>% summarise(numMedals = n())
df <- df[order(-df$numMedals), ] %>% filter(numMedals >= 17)
library(ggplot2)
ggplot(df, aes(x = reorder(Team, -numMedals), y=numMedals)) + geom_col(fill = "green4") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ggtitle("Number of Gold Medals- Football/Soccer") + theme(plot.title = element_text(hjust = 0.5))+ xlab("Country") + ylab("Number of Medals")
ds <- swimming %>% filter(Medal == "Gold") %>% group_by(Team) %>% summarise(numMedals = n())
ds <- ds[order(-ds$numMedals), ] %>% filter(numMedals >= 14)
ggplot(ds, aes(x = reorder(Team, -numMedals), y=numMedals)) + geom_col(fill = "skyblue3") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ggtitle("Number of Gold Medals- Swimming") + theme(plot.title = element_text(hjust = 0.5))+ xlab("Country") + ylab("Number of Medals")
da <- athletics %>% filter(Medal == "Gold") %>% group_by(Team) %>% summarise(numMedals = n())
da <- da[order(-da$numMedals), ] %>% filter(numMedals >= 27)
ggplot(da, aes(x = reorder(Team, -numMedals), y=numMedals)) + geom_col(fill = "salmon3") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ggtitle("Number of Gold Medals- Athletics") + theme(plot.title = element_text(hjust = 0.5))+ xlab("Country") + ylab("Number of Medals")
golds <- athlete_events %>% filter(Medal == "Gold")
g <- golds %>% group_by(Team) %>% summarise(numGolds = n())
test <- g
write.csv(test, "goldmedals.csv")
golds_final <- read.csv("goldmedals_final.csv")
countries <- map_data('world')
merged <-  right_join(golds_final, countries, by= c("Team"="region"))
library(ggplot2)
p <- ggplot(merged, aes(x=long, y=lat, fill= numGolds)) + geom_polygon(aes(group=group)) + geom_path(aes(group=group)) + xlab("Longitude") + ylab("Latitude")
p <- p + scale_fill_continuous(low='white', high='red', na.value='grey') + labs(fill= "Number of Gold Medals")
p
p <- p + scale_fill_continuous(low='white', high='darkred', na.value='grey') + labs(fill= "Number of Gold Medals")
p
View(rus_medals)
x = 4
mean_x = 10
mean_y = 0
variance = 36
prob1 = 0.8
prob2 = 0.2
fk1 = (prob1*exp(-(x-mean_x)^2 / 2*variance))/(prob1*exp(-(x-mean_x)^2 / 2*variance) + prob2*exp(-(x-mean_y)^2 / 2*variance)) ; fk1
install.packages("ISLR")
?auto
library(ISLR)
head(Auto)
str(Auto)
auto = Auto
medain(auto$mpg)
?median
library(stats)
medain(auto$mpg)
median(auto$mpg)
library(dplyr)
View(auto)
?ifelse
auto$mpg01 <- ifelse(auto$mpg < median(auto$mpg), 0, 1)
View(auto)
##part b
library(MASS)
ldahist(mpg01~,)
ldahist(mpg01~.)
ldahist(auto, mpg01~.)
ldahist(auto$mpg01, mpg01~.)
ldahist(auto$mpg01, mpg01)
ldahist(auto$mpg01, auto$mpg01)
ldahist(auto, auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,3], auto$mpg01)
ldahist(auto[,4], auto$mpg01)
ldahist(auto[,5], auto$mpg01)
ldahist(auto[,6], auto$mpg01)
ldahist(auto[,7], auto$mpg01)
ldahist(auto[,8], auto$mpg01)
ldahist(auto[,9], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,0], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,3], auto$mpg01)
ldahist(auto[,4], auto$mpg01)
ldahist(auto[,10], auto$mpg01)
ldahist(auto[,9], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,3], auto$mpg01)
ldahist(auto[,4], auto$mpg01)
ldahist(auto[,5], auto$mpg01)
ldahist(auto[,6], auto$mpg01)
ldahist(auto[,7], auto$mpg01)
ldahist(auto[,8], auto$mpg01)
##ldahist(auto[,9], auto$mpg01)
ldahist(auto[,10], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,3], auto$mpg01)
ldahist(auto[,4], auto$mpg01)
ldahist(auto[,5], auto$mpg01)
ldahist(auto[,6], auto$mpg01)
ldahist(auto[,7], auto$mpg01)
ldahist(auto[,8], auto$mpg01)
ldahist(auto[,1], auto$mpg01)
ldahist(auto[,2], auto$mpg01)
ldahist(auto[,3], auto$mpg01)
ldahist(auto[,4], auto$mpg01)
?sample
?sample_frac
##part c
auto_train <- sample_frac(auto, 0.8)
auto_test <- sample_frac(auto, 0.2)
auto_lda <- lda(auto_train)
auto_lda <- lda(auto_train, mpg01)
auto_lda <- lda(auto_train, auto_trian$mpg01)
auto_lda <- lda(auto_train, auto_train$mpg01)
##part d: LDA
labels <- auto_train[,10]
auto_lda <- lda(auto_train, labels)
auto_lda <- lda(auto_train[,c("cylinders", "weight")], labels)
auto_lda <- lda(auto_train[,c("cylinders", "weight", "horsepower", "displacement")], labels)
auto_pred_lda <- predict(auto_lda, auto_trian)
auto_pred_lda <- predict(auto_lda, auto_train)
auto_pred_lda <- predict(auto_lda, auto_train[,c("cylinders", "weight", "horsepower", "displacement")])
auto_pred_lda
table(labels, auto_pred_lda$class)
library(klaR)
install.packages("klaR")
library(klaR)
partimat(labels~auto_train[,"cylinders"] + auto_train[,"weight"]) + auto_train[,"horsepower"] + auto_train[,"displacement"], data=auto_train, method="lda", prec=500)
partimat(labels~auto_train[,"cylinders"] + auto_train[,"weight"]) + auto_train[,"horsepower"] + auto_train[,"displacement"] data=auto_train, method="lda", prec=500)
partimat(labels~(auto_train[,"cylinders"] + auto_train[,"weight"]) + auto_train[,"horsepower"] + auto_train[,"displacement"]), data=auto_train, method="lda", prec=500)
partimat(labels~auto_train[,1] + auto_train[,2]) + auto_train[,3] + auto_train[,4], data=auto_train, method="lda", prec=500)
partimat(labels~auto_train[,1] + auto_train[,2]) + auto_train[,3] + auto_train[,4])
partimat(labels~auto_train[,1] + auto_train[,2]) + auto_train[,3] + auto_train[,4]
partimat(labels~auto_train[,1] + auto_train[,2] + auto_train[,3] + auto_train[,4], data=auto_train, method="lda", prec=500)
partimat(auto_pred_lda$class~auto_train[,1] + auto_train[,2] + auto_train[,3] + auto_train[,4], data=auto_train, method="lda", prec=500)
install.packages("MVN")
##assumptions of LDA
##multivariate normal distribution
library(MVN)
View(auto_train)
str(auto_train)
iris
mvn(as.matrix(auto_train[auto_train[,10]== 0,1:9]), mvnTest = c("hz"))$multivariateNormality
mvn(as.matrix(auto_train[auto_train[,10]== 1,1:9]), mvnTest = c("hz"))$multivariateNormality
mvn(as.matrix(auto_train[auto_train[,10]== 0,1:8]), mvnTest = c("hz"))$multivariateNormality
mvn(as.matrix(auto_train[auto_train[,10]== 1,1:8]), mvnTest = c("hz"))$multivariateNormality
source('~/Downloads/BoxMTest-1.R', echo=TRUE)
##homogenous covariance matrices
BoxMTest(auto_train[,1:8],auto_train[,10])
auto_train <- select(auto_train, c("cylinders", "weight", "horsepower", "displacement", "mpg01"))
auto_train <- auto_train %>% select(c("cylinders", "weight", "horsepower", "displacement", "mpg01"))
auto_train <- auto_train %>% select("cylinders", "weight", "horsepower", "displacement", "mpg01")
auto_train %>% select("cylinders", "weight", "horsepower", "displacement", "mpg01")
?select
auto_train <- auto_train %>% select(cylinders, "weight", "horsepower", "displacement", "mpg01")
auto_train <- auto_train %>% select(cylinders, weight, horsepower, displacement, mpg01)
auto_train <- auto_train %>% dplyr::select(cylinders, weight, horsepower, displacement, mpg01)
mvn(as.matrix(auto_train[auto_train[,5]== 0,1:4]), mvnTest = c("hz"))$multivariateNormality
mvn(as.matrix(auto_train[auto_train[,5]== 1,1:4]), mvnTest = c("hz"))$multivariateNormality
##homogenous covariance matrices
BoxMTest(auto_train[,1:4],auto_train[,5])
##part d: LDA
labels <- auto_train[,5]
auto_lda <- lda(auto_train[,c("cylinders", "weight", "horsepower", "displacement")], labels)
auto_pred_lda <- predict(auto_lda, auto_train[,c("cylinders", "weight", "horsepower", "displacement")])
table(labels, auto_pred_lda$class)
install.packages("klaR")
install.packages("klaR")
library(klaR)
partimat(auto_pred_lda$class~auto_train[,1] + auto_train[,2] + auto_train[,3] + auto_train[,4], data=auto_train, method="lda", prec=500)
##part d:QDA
auto_qda <- qda(auto_train[,c("cylinders", "weight", "horsepower", "displacement")], labels)
auto_pred_qda <- predict(auto_qda, auto_train[,c("cylinders", "weight", "horsepower", "displacement")])
table(labels, auto_pred_qda$class)
library(klaR)
# AUC LDA
library(glmnet)
# AUC LDA
library(glmnet)x
pred.lda <- predict(auto_lda, auto_train)$posterior[,2]
auto_lda
pred.lda <- predict(auto_lda)$posterior[,2]
auc(labels,pred.lda)
# AUC QDA
pred.qda <- predict(auto_qda)$posterior[,2]
auc(labels,pred.qda)
ROC <- function(pred, labels){
probsSort <- sort(pred, decreasing = TRUE, index.return = TRUE)
val <- unlist(probsSort$x)
idx <- unlist(probsSort$ix)
idx <- as.numeric(idx)
labels<-as.numeric(labels)
roc_y <- labels[idx]
stack_x <- cumsum(roc_y == 0)/sum(roc_y == 0)
stack_y <- cumsum(roc_y == 1)/sum(roc_y == 1)
auc <- sum((stack_x[2:length(roc_y)]-stack_x[1:length(roc_y)-1])*stack_y[2:length(roc_y)])
c <- ggplot(data.frame(x=stack_x,y=stack_y), aes(x = x, y = y))
c <- c + labs(title = substitute("ROC curve, auc" ==auc, list(auc=auc)))
c + geom_line(colour = "blue",size=1)+xlab("False Positive Rate (1-specificity)") +ylab("True Positive Rate (sensitivity)") +
xlim(0,1)+ ylim(0,1) + geom_line(aes(x=seq(0,0,length.out = length(stack_x)),y=seq(0,y[1],length.out = length(stack_x))),colour="blue",size=1)+
geom_line(aes(x=seq(0,1,length.out = length(stack_x)),y=seq(0,1,length.out = length(stack_x))),colour="gray",size=0.75,linetype="dashed")
}
ROC(pred.lda, labels)
library(ggplot2)
ROC(pred.lda, labels)
ROC(pred.qda, labels)
##part d:Naive Bayes
partimat(labels~.,data=auto_train,method="naiveBayes",prec=500)
labels
##part d:Naive Bayes
partimat(auto_pred_qda$class~auto_train[,1] + auto_train[,2] + auto_train[,3] + auto_train[,4], data=auto_train, method="naiveBayes", prec=500)
knitr::opts_chunk$set(echo = TRUE)
install.packages(countrycode)
install.packages(countrycode)
install.packages(countrycode)
install.packages(countrycode)
library(ggplot2)
library(dplyr)
library(lubridate)
Athlete <- read.csv(file = "athlete_events.csv")
Athlete <- read.csv(file = "athlete_events.csv")
Regions <- read.csv(file = "noc_regions.csv")
#In the above barplot, it shows in 1900, it starts have female athletes.
Year1900 <- Athlete %>% filter(Year == 1900)
filterSex <- Year1900 %>% filter(Sex == 'F')
GroupfilterSex <- filterSex %>% group_by(NOC) %>% summarise(Athlete = length(unique(ID)))
View(GroupfilterSex)
GroupSport <- Year1900 %>% group_by(Sport, Sex) %>% summarise(Athlete = length(unique(Name)))
GroupSport <- Year1900 %>% group_by(Sport, Sex) %>% summarise(Athlete = length(unique(Name)))
ggplot(GroupSport, aes(x=Sport, y=Athlete, fill = Sex))+geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(GroupSport, aes(x=Sport, y=Athlete, fill = Sex))+geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Most female at that time join Olympics for golf and tennis
filterFemale <- Year1900 %>% filter(Sex=="F")
GroupNOC <- Year1896 %>% group_by(NOC) %>% summarise(n=n())
#In the above barplot, it shows in 1900, it starts have female athletes.
Year1900 <- Athlete %>% filter(Year == 1900)
filterSex <- Year1900 %>% filter(Sex == 'F')
GroupfilterSex <- filterSex %>% group_by(NOC) %>% summarise(Athlete = length(unique(ID)))
View(GroupfilterSex)
Vie(filterSex)
View(filterSex)
ggplot(GroupfilterSex, aes(x=NOC, y=Athlete, fill=NOC))+ geom_bar(stat = "identity")+ylim(c(0,15))+ylab("Number of Athletes")+
scale_fill_manual(values = c("grey","red","grey","grey","grey","red"))+
xlab("National Olympic Committee 3-letter code")+theme(axis.text.x = element_text(angle=45, hjust=1))+geom_text(aes(label = Athlete))
#Number of Male and Female in each year
GroupYearSex <- Athlete %>% group_by(Year, Sex) %>% summarise(Athletes = length(unique(Name)))
View(GroupYearSex)
